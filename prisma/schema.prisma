// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model synced with Clerk
model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique
  email         String    @unique
  firstName     String?
  lastName      String?
  avatarUrl     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  projects      Project[]
  apiRequests   ApiRequest[]
  
  @@map("users")
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  apiRequests ApiRequest[]
  
  @@map("projects")
}

model ApiRequest {
  id          String    @id @default(cuid())
  projectId   String
  userId      String
  prompt      String
  status      RequestStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  databaseType    DatabaseType?
  ormType         OrmType?
  frameworkType   FrameworkType?
  languageType    LanguageType?
  
  generatedApis   GeneratedApi[]
  databaseSchema  DatabaseSchema?
  setupCommands   SetupCommand[]
  
  // Relations
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("api_requests")
}

// Generated API endpoints
model GeneratedApi {
  id              String    @id @default(cuid())
  apiRequestId    String
  name            String    // API name (e.g., "User Management", "Authentication")
  description     String?
  endpoint        String    // e.g., "/api/users"
  method          HttpMethod
  code            String    // Generated code for this endpoint
  createdAt       DateTime  @default(now())
  
  // Relations
  apiRequest      ApiRequest @relation(fields: [apiRequestId], references: [id], onDelete: Cascade)
  
  @@map("generated_apis")
}

// Database schema information
model DatabaseSchema {
  id              String    @id @default(cuid())
  apiRequestId    String    @unique
  schema          String    // JSON or string representation of the schema
  migrations      String?   // Generated migration files
  createdAt       DateTime  @default(now())
  
  // Relations
  apiRequest      ApiRequest @relation(fields: [apiRequestId], references: [id], onDelete: Cascade)
  
  @@map("database_schemas")
}

// Setup commands for users to run
model SetupCommand {
  id              String    @id @default(cuid())
  apiRequestId    String
  order           Int       // Order of execution
  command         String    // The actual command to run
  description     String    // What this command does
  category        CommandCategory
  createdAt       DateTime  @default(now())
  
  // Relations
  apiRequest      ApiRequest @relation(fields: [apiRequestId], references: [id], onDelete: Cascade)
  
  @@map("setup_commands")
}

// Enums
enum RequestStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum DatabaseType {
  POSTGRESQL
  MYSQL
  MONGODB
}

enum OrmType {
  PRISMA
  MONGOSE
  DRIZZLE
}

enum FrameworkType {
  EXPRESS
  NEXTJS
}

enum LanguageType {
  JAVASCRIPT
  TYPESCRIPT
}

enum HttpMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
  OPTIONS
  HEAD
}

enum CommandCategory {
  SETUP
  INSTALL
  CONFIGURE
  MIGRATE
  START
  TEST
  DEPLOY
}
